/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package frontend;

/**
 *
 * @author Etijah
 */
import backend.*;
import frontend.notificationsUI.Button;
import frontend.notificationsUI.ImageAvatar;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.IOException;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;

public class notificationItem extends JPanel {

    /**
     * Creates new form notificationItem
     */
    private Notification notification;
    private String userId;
    private NotificationType type = null;
    private String photo;
    private String username;
    private String desc;
    private LocalDateTime time;
    private ProfileManager profileManager=ProfileManager.getInstance();
    private GroupManager groupManager=GroupManager.getInstance();
    private FriendManager friendManager;
    {
        try {
            friendManager = FriendManager.getInstance();
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }

    public notificationItem(String userId,Notification notification) {
        this.userId = userId;
        this.notification = notification;
        if(notification.getType().equals(NotificationType.POST)){
            if(profileManager.getUser(notification.getAuthorId()).getProfile().getProfilePhoto()!=null){
            this.photo = profileManager.getUser(notification.getAuthorId()).getProfile().getProfilePhoto();
            }
            else photo="src/database/defaultIcon.jpg";
            this.username = profileManager.getUser(notification.getAuthorId()).getUsername();
        }
        else if(notification.getType().equals(NotificationType.ACCEPTED)||notification.getType().equals(NotificationType.REQUEST)) {

            if(profileManager.getUser(notification.getRelativeId()).getProfile().getProfilePhoto()!=null){
                this.photo = profileManager.getUser(notification.getRelativeId()).getProfile().getProfilePhoto();
            }
            else photo="src/database/defaultIcon.jpg";
            this.username = profileManager.getUser(notification.getRelativeId()).getUsername();
        }
        else
        {

            if(profileManager.getUser(notification.getRelativeId()).getProfile().getProfilePhoto()!=null){
                this.photo = profileManager.getUser(notification.getRelativeId()).getProfile().getProfilePhoto();
            }
            else photo="src/database/CoverDefault.jpg";
            this.username=groupManager.getGroup(notification.getRelativeId()).getName();
        }
        this.desc = notification.getMessage();
        this.time = notification.getTime();
        this.type = notification.getType();
        initComponents();
        loadNotificationItem();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        usernameLabel = new javax.swing.JLabel();
        descriptionLabel = new javax.swing.JLabel();
        TimeLabel = new javax.swing.JLabel();
        imageAvatar1 = new frontend.notificationsUI.ImageAvatar();
        VIewOrAcceptButton = new frontend.notificationsUI.Button();
        RejectButton = new frontend.notificationsUI.Button();

        setBackground(new java.awt.Color(255, 255, 255));

        usernameLabel.setFont(new java.awt.Font("SansSerif", 1, 13)); // NOI18N
        usernameLabel.setForeground(new java.awt.Color(90, 90, 90));
        usernameLabel.setText("username");

        descriptionLabel.setFont(new java.awt.Font("SansSerif", 1, 13)); // NOI18N
        descriptionLabel.setForeground(new java.awt.Color(153, 153, 153));
        descriptionLabel.setText("description");

        TimeLabel.setForeground(new java.awt.Color(50, 50, 50));
        TimeLabel.setText("Time");

        imageAvatar1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/database/behance-profile.png"))); // NOI18N

        VIewOrAcceptButton.setBackground(new java.awt.Color(51, 153, 0));
        VIewOrAcceptButton.setForeground(new java.awt.Color(255, 255, 255));
        VIewOrAcceptButton.setText("View Group");
        VIewOrAcceptButton.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N

        RejectButton.setForeground(new java.awt.Color(255, 255, 255));
        RejectButton.setText("Reject");
        RejectButton.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(imageAvatar1, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(usernameLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(descriptionLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(RejectButton, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(TimeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(VIewOrAcceptButton, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 11, Short.MAX_VALUE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 11, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(imageAvatar1, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(usernameLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(descriptionLabel)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(TimeLabel)
                            .addComponent(VIewOrAcceptButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(RejectButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(62, 62, 62))
        );
    }// </editor-fold>//GEN-END:initComponents
    void loadNotificationItem()
    {
        System.out.println(photo);
        imageAvatar1.setIcon(new ImageIcon(photo));
        usernameLabel.setText(username);
        descriptionLabel.setText(desc);
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd/MM/yyyy HH:mm:ss");
        LocalDateTime localDateTime=time;
        String formattedDate = localDateTime.format(formatter);
        TimeLabel.setText(formattedDate);
        if(type.equals(NotificationType.REQUEST))
        {
            VIewOrAcceptButton.setText("Accept");
            VIewOrAcceptButton.addActionListener(new ActionListener() {
                public void actionPerformed(ActionEvent evt) {
                    VIewOrAcceptButtonActionPerformed(evt);
                }
                private void VIewOrAcceptButtonActionPerformed(ActionEvent evt) {
                    try {
                        friendManager.respond(userId,notification.getRelativeId(),true);
                        VIewOrAcceptButton.setVisible(false);
                        RejectButton.setVisible(false);
                    } catch (IOException e) {
                        throw new RuntimeException(e);
                    }
                }
            });
            RejectButton.addActionListener(new ActionListener() {
                public void actionPerformed(ActionEvent evt) {
                    RejectButtonActionPerformed(evt);
                }
                private void RejectButtonActionPerformed(ActionEvent evt) {
                    try {
                        friendManager.respond(userId,notification.getRelativeId(),false);
                        VIewOrAcceptButton.setVisible(false);
                        RejectButton.setVisible(false);
                        revalidate();
                        repaint();
                    } catch (IOException e) {
                        throw new RuntimeException(e);
                    }
                }
            });
        } else if (type.equals(NotificationType.ACCEPTED)) {
            RejectButton.setVisible(false);
            VIewOrAcceptButton.setText("View Profile");
            VIewOrAcceptButton.addActionListener(new ActionListener() {
                public void actionPerformed(ActionEvent evt) {
                    VIewOrAcceptButtonActionPerformed(evt);
                }
                private void VIewOrAcceptButtonActionPerformed(ActionEvent evt) {
                    try {
                        new UserProfileFrame(notification.getRelativeId());
                        revalidate();
                        repaint();
                    } catch (IOException e) {
                        throw new RuntimeException(e);
                    }
                }
            });
        } else if (type.equals(NotificationType.ADDING)) {
            RejectButton.setVisible(false);
            VIewOrAcceptButton.setText("View Group");
            VIewOrAcceptButton.addActionListener(new ActionListener() {
                public void actionPerformed(ActionEvent evt) {
                    VIewOrAcceptButtonActionPerformed(evt);
                }
                private void VIewOrAcceptButtonActionPerformed(ActionEvent evt) {
                    new GroupPage(userId,notification.getRelativeId());
                    revalidate();
                    repaint();
                }
            });
        }
        else if(type.equals(NotificationType.PROMOTION)) {
            RejectButton.setVisible(false);
            VIewOrAcceptButton.setText("View Group");
            VIewOrAcceptButton.addActionListener(new ActionListener() {
                public void actionPerformed(ActionEvent evt) {
                    VIewOrAcceptButtonActionPerformed(evt);
                }
                private void VIewOrAcceptButtonActionPerformed(ActionEvent evt) {
                    new GroupPage(userId,notification.getRelativeId());
                    revalidate();
                    repaint();
                }
            });
        }
        else if(type.equals(NotificationType.DEMOTION)) {
            RejectButton.setVisible(false);
            VIewOrAcceptButton.setText("View Group");
            VIewOrAcceptButton.addActionListener(new ActionListener() {
                public void actionPerformed(ActionEvent evt) {
                    VIewOrAcceptButtonActionPerformed(evt);
                }
                private void VIewOrAcceptButtonActionPerformed(ActionEvent evt) {
                    new GroupPage(userId,notification.getRelativeId());
                    revalidate();
                    repaint();
                }
            });
        }
        else if(type.equals(NotificationType.POST)) {
            RejectButton.setVisible(false);
            VIewOrAcceptButton.addActionListener(new ActionListener() {
                public void actionPerformed(ActionEvent evt) {
                    VIewOrAcceptButtonActionPerformed(evt);
                }
                private void VIewOrAcceptButtonActionPerformed(ActionEvent evt) {
                    new GroupPage(userId,notification.getRelativeId());
                    revalidate();
                    repaint();
                }
            });
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private frontend.notificationsUI.Button RejectButton;
    private javax.swing.JLabel TimeLabel;
    private frontend.notificationsUI.Button VIewOrAcceptButton;
    private javax.swing.JLabel descriptionLabel;
    private frontend.notificationsUI.ImageAvatar imageAvatar1;
    private javax.swing.JLabel usernameLabel;
    // End of variables declaration//GEN-END:variables
}
